{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers'; // Assuming your root reducer is in ./reducers/index.js\n\nconst currentUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null;\nconst preloadedState = {\n  userLoginReducer: {\n    currentUser\n  }\n};\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState,\n  middleware: [thunk],\n  enhancers: [composeWithDevTools()]\n});\nexport default store;","map":{"version":3,"names":["configureStore","thunk","composeWithDevTools","rootReducer","currentUser","localStorage","getItem","JSON","parse","preloadedState","userLoginReducer","store","reducer","middleware","enhancers"],"sources":["D:/lsm/frontend/src/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers'; // Assuming your root reducer is in ./reducers/index.js\r\n\r\nconst currentUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null;\r\n\r\nconst preloadedState = {\r\n  userLoginReducer: { currentUser }\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  preloadedState,\r\n  middleware: [thunk],\r\n  enhancers: [composeWithDevTools()]\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,OAAOC,WAAW,MAAM,YAAY,CAAC,CAAC;;AAEtC,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI;AAEhH,MAAMG,cAAc,GAAG;EACrBC,gBAAgB,EAAE;IAAEN;EAAY;AAClC,CAAC;AAED,MAAMO,KAAK,GAAGX,cAAc,CAAC;EAC3BY,OAAO,EAAET,WAAW;EACpBM,cAAc;EACdI,UAAU,EAAE,CAACZ,KAAK,CAAC;EACnBa,SAAS,EAAE,CAACZ,mBAAmB,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF,eAAeS,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}